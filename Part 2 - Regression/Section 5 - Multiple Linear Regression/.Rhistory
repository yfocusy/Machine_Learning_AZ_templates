print("22")
setwd("~/Documents/Machine Learning A-Z Chinese Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing")
dataset = read.csv('Data.csv')
#i
dataset
View(dataset)
View(dataset)
is.na(dataset$Age)
View(dataset)
View(dataset)
dataset$Age[is.na(dataset$Age)]
mean(dataset$Age)
View(dataset)
View(dataset)
# taking care of missing data
datasetAge[is.na(dataset$Age,na.rm = T)]
# taking care of missing data
dataset$Age[is.na(dataset$Age,na.rm = T)]
# taking care of missing data
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age,na.rm = T)
View(dataset)
View(dataset)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary,na.rm = T)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels=c('France','Spain','Germany'),
labels=c(1,2,3)
)
dataset$Purchased = factor(dataset$Country,
levels=c('No','Yes',),
labels=c(0,1,))
dataset$Purchased = factor(dataset$Country,
levels=c('No','Yes',),
labels=c(0,1))
dataset$Purchased = factor(dataset$Country,
levels=c('No','Yes'),
labels=c(0,1))
dataset$Purchased = factor(dataset$Purchased,
levels=c('No','Yes'),
labels=c(0,1))
dataset$Country = factor(dataset$Country,
levels=c('France','Spain','Germany'),
labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels=c('No','Yes'),
labels=c(0,1))
dataset = read.csv('Data.csv')
# taking care of missing data
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age,na.rm = T)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary,na.rm = T)
dataset$Country = factor(dataset$Country,
levels=c('France','Spain','Germany'),
labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels=c('No','Yes'),
labels=c(0,1))
dataset = read.csv('Data.csv')
# taking care of missing data
dataset$Age[is.na(dataset$Age)] = mean(dataset$Age,na.rm = T)
dataset$Salary[is.na(dataset$Salary)] = mean(dataset$Salary,na.rm = T)
dataset$Country = factor(dataset$Country,
levels=c('France','Spain','Germany'),
labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels=c('No','Yes'),
labels=c(0,1))
dataset
View(dataset)
install.packages('caTools')
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset,split == TRUE)
View(training_set)
View(training_set)
test_set = subset(dataset,split == FALSE)
View(test_set)
View(test_set)
# 6. feature Scaling 特征缩放
training_set = scale(training_set)
test_set = scale(test_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
View(training_set)
View(training_set)
View(test_set)
View(test_set)
setwd("~/Documents/Machine Learning A-Z Chinese Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(test_set)
View(dataset)
View(dataset)
# data preprocessing template
# -------------------------------------------------------------
# 1. Importing the dataset
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
# -------------------------------------------------------------
# 3. splitting the dataset into the traning set and test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
install.packages("caTools")
# fitting simple regression to the training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
regressor = lm(formula = Salary - YearExperience,
data = training_set)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
regressor = lm(formula = Salary - YearExperience,
data = training_set)
regressor = lm(formula = Salary ~ YearExperience,
data = training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
View(test_set)
View(test_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
# Visualising the training set results
install.packages('ggplot2')
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(ggplots)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=traning_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=traning_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
# Visualising the training set results
install.packages('ggplot2')
library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages('ggplot2')
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
#  ggtitle("Salary vs Experience (Training set)") +
#  xlab("year of Experience") +
#  ylab("Salary")
# Visualising the training set results
#install.packages('ggplot2')
#library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
#  ggtitle("Salary vs Experience (Training set)") +
#  xlab("year of Experience") +
#  ylab("Salary")
# Visualising the training set results
#install.packages('ggplot2')
#library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
#  ggtitle("Salary vs Experience (Training set)") +
#  xlab("year of Experience") +
#  ylab("Salary")
# Visualising the training set results
#install.packages('ggplot2')
#library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue')
#+
#  ggtitle("Salary vs Experience (Training set)") +
#  xlab("year of Experience") +
#  ylab("Salary")
# Visualising the training set results
#install.packages('ggplot2')
#library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue')
#+
#  ggtitle("Salary vs Experience (Training set)") +
#  xlab("year of Experience") +
#  ylab("Salary")
# Visualising the training set results
#install.packages('ggplot2')
#library(ggplot2)
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=test_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=test_set$YearsExperience, y=predict(regressor,newdata=test_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (Training set)") +
xlab("year of Experience") +
ylab("Salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='green') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor,newdata=training_set)),
color='blue') +
ggtitle("Salary vs Experience (test set)") +
xlab("year of Experience") +
ylab("Salary")
setwd("~/Documents/Machine Learning A-Z Chinese Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels=c("New York", "California","Cermany"),
labels=c(1,2,3))
dataset$State = factor(dataset$State,
levels=c("New York", "California","Florida",),
labels=c(1,2,3))
dataset$State = factor(dataset$State,
levels=c("New York", "California","Florida"),
labels=c(1,2,3))
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels=c("New York", "California","Florida"),
labels=c(1,2,3))
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
regressor = lm(formula=Profit ~ .,
data = training_set)
summary(regressor)
regressor = lm(formula=Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata=test_set)
y_pred
regressor = lm(formula=Profit ~ .,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata=test_set)
y_pred
regressor = lm(formula=Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
# Buliding the optimal model using Backward Elimination
summary(regressor)
regressor = lm(formula=Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula=Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula=Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
